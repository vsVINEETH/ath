<style>
  body {
    margin-top: 20px;
    background-color: #f2f6fc;
    color: #69707a;
  }

  .card {
    box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%);
  }

  .card .card-header {
    font-weight: 500;
  }

  .card-header:first-child {
    border-radius: 0.35rem 0.35rem 0 0;
  }

  .card-header {
    padding: 1rem 1.35rem;
    margin-bottom: 0;
    background-color: rgba(33, 40, 50, 0.03);
    border-bottom: 1px solid rgba(33, 40, 50, 0.125);
  }

  .btn-danger-soft {
    color: #000;
    background-color: #f1e0e3;
    border-color: #f1e0e3;
  }
</style>
<%- include('nav-bar') %>
<div class="container-xl px-4 mt-2">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-4  ">
    <h1 class="page">My Wallet</h1>
  </div>
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb border-bottom">
      <li class="breadcrumb-item">
        <a href="/home">Home</a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">Wallet</li>
    </ol>
  </nav>
  <div id="alertContainer"></div>
  <div class="row justify-content-center">
    <div class="col-lg-8">

      <div class="card mb-4">
        <div class="card-header text-center">Wallet History &#128209;</div>
        <div class="card-body ">

          <div class="row mb-3">
            <div class="table-responsive">
              <div style="max-height: 400px; overflow-y: auto;">
              <table class="table table-striped table  justify-content-center ">
                <thead class="text-center">
                  <tr>
                    <th scope="col" class="">Date</th>
                    <th scope="col" class="">Amount</th>
                    <th scope="col" class="">Status</th>
                    <th scope="col" class="">Description</th>
                  </tr>
                </thead>
                <tbody>
                  <% let userId = null %>
                  <% let balance = null %>
                  <% walletData.forEach((walletItem) => { %>
                  <% userId = walletItem.user %>
                  <% balance = walletItem.balance %>
                  <% walletItem.transactions.forEach((item, index) => { %>
                  <tr class="align-middle text-center">
                    <td class=""><%= item.createdAt.toLocaleDateString() %></td>
                    <% if (item.type == "credited") { %>
                      <td class="text-success">+<%= item.amount %></td>
                      <td class="text-success" ><%= item.type %></td>

                    <% } else if (item.type == "debited") { %>
                    <td class="text-warning">-<%= item.amount %></td>
                    <td class="text-warning"><%= item.type %></td>

                    <% } else if (item.type == "failed") { %>
                      <td class="text-danger"><%= item.amount %></td>
                      <td class="text-danger"><%= item.type %></td>
                      <% } %>

                    <td class=""><%= item.description %></td>
                  </tr>
                  <% }) %>
                  <% }) %>
                </tbody>
              </table>
             </div>
            </div>
          </div>
        </div>
      </div>
    </div>


    <div class="col-lg-4">
      <div class="card mb-4">
        <div class="card-header text-center">Happy to see you &#128522;</div>
        <div class="card-body">
          <form class="row" action="/wallet_add_money" method="post" >
            <!-- onsubmit="return validateAmount()" -->
            <p class="fw-bold text-center">Wallet Balance</p>
            <h2 class="text-center text-secondary">&#8377;<%= balance%></h2>
            <hr class="mt-4">

            <div class="row justify-content-evenly  mt-4">
              <div class="col-md-8 ">
                <div>
                  <input type="text" id="amountInput" name="walletMoney" class="form-control rounded form-control-sm ms-3">
                  <p id="amountError" class="small text-center mt-3 text-danger" style="display: none;">
                    This field is required.
                  </p>
                </div>
              </div>
              <div class="col-md-4 text-center">
                <div>
                  <button id="addMoneyBtn" class="btn btn-sm btn-dark" type="button">Add money</button>
                </div>
              </div>
            </div>
            <p id="amountWarning" class="small text-center mt-3 text-secondary" style="display: block;">
              You can add up to 10,000 at once.
            </p>
          </form>

        </div>
      </div>
    </div>
  </div>

</div>

</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  

  document.addEventListener('DOMContentLoaded', () => {
    const addMoneyBtn = document.getElementById('addMoneyBtn');

    addMoneyBtn.addEventListener('click', async () => {
      try {
        const amountInput = document.querySelector('input[name="walletMoney"]');
        const amountValue = parseInt(amountInput.value);

        if (amountValue < 10 || amountValue > 10000) { //validation

          const alertContainer = document.getElementById('alertContainer');
          const alertElement = document.createElement('div');
          alertContainer.innerHTML = '';
          alertElement.className = 'alert alert-warning alert-dismissible'; // Add Bootstrap classes
          alertElement.setAttribute('role', 'alert');
          alertElement.style.opacity = '0';

          alertElement.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
          <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
        </svg>
        Amount must be between &#8377;100 and &#8377;10,000.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

          alertContainer.appendChild(alertElement);
          alertContainer.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });

          let opacity = 0;
          const fadeInInterval = setInterval(() => {
            opacity += 0.1; // Increase opacity gradually
            alertElement.style.opacity = `${opacity}`; // Set the new opacity
            if (opacity >= 1) {
              clearInterval(fadeInInterval); // Stop increasing opacity when it reaches 1
            }
          }, 50);

          return false;
        }

        //validation
        if (!amountValue) {
          const amountWarning = document.getElementById('amountWarning');
          amountWarning.style.display = 'none';
          const amountError = document.getElementById('amountError');
          amountError.style.display = 'block';
          setTimeout(() => {
            amountError.style.display = 'none';
          },2000)
          return;
        }

        // If online payment selected, initiate Razorpay payment
        const userId = '<%= userId %>'
        const response = await fetch(`/wallet_razorpayInstance/${userId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            amount: amountValue,
          }),
        });

        if (response.ok) {
          const responseData = await response.json();
          const {
            orderId
          } = responseData;

          // Initiate Razorpay payment with orderId
          const razorpayOptions = {
            key: '<%= process.env.PAYMENT_KEY_ID %>',
            amount: amountValue,
            currency: 'INR',
            name: 'ath.',
            description: 'Payment for Order',
            order_id: orderId,
            handler: async function(response) {
              // Handle Razorpay response
              if (response.razorpay_payment_id) {
                // Payment successful, proceed to place order
                await placeOrder();
              } else {
                console.error('Razorpay payment failed');
              }
            },
            prefill: {
              name: 'User Name',
              email: 'user@example.com',
              contact: '9876543210',
            },
            notes: {
              address: 'User Address',
            },
            theme: {
              color: '#3399cc',
            },
          };

          const rzp = new Razorpay(razorpayOptions);
          rzp.on('payment.failed', function(response) {
            // rzp1.close();
            handlePaymentFailure();
          });

          rzp.open();
        } else {
          // Handle failed response
          console.error('Failed to initiate Razorpay payment');
        }
      } catch (error) {
        console.error('Error:', error);
      }
    });


    async function handlePaymentFailure() {
      try {
        const amountInput = document.querySelector('input[name="walletMoney"]');
        const amountValue = parseInt(amountInput.value);
        const status = false

        const response = await fetch(`/wallet_add_money`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({amount: amountValue, status:status})
        });

        if (response.ok) {

          const walletData = await response.json();
          console.log('Faild to add money in wallet successfully');

          const alertContainer = document.getElementById('alertContainer');

// Clear existing alerts
           alertContainer.innerHTML = '';

          const alertElement = document.createElement('div');
          alertElement.className = 'alert alert-danger alert-dismissible fade show'; // Add Bootstrap classes
          alertElement.setAttribute('role', 'alert');
          alertElement.style.opacity = '0';

          alertElement.innerHTML = `
                   
         <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
         <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
         </svg>
         Faild add money to the wallet.
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
         `;

          // Append the alert to the container
          alertContainer.appendChild(alertElement);
          alertContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
          let opacity = 0;
          const fadeInInterval = setInterval(() => {
            opacity += 0.1; // Increase opacity gradually
            alertElement.style.opacity = `${opacity}`; // Set the new opacity
            if (opacity >= 1) {
              clearInterval(fadeInInterval); // Stop increasing opacity when it reaches 1
            }
          }, 50);

          setInterval(() => {
            window.location.reload();
              
          },2000)

        } else {
          console.error('Failed to handle payment failure');
        }
      } catch (error) {
        console.error('Error handling payment failure:', error);
      }
    }

    async function placeOrder() {
     
      const amountInput = document.querySelector('input[name="walletMoney"]');
      const amountValue = parseInt(amountInput.value);
      const status = true

      const response = await fetch(`/wallet_add_money`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({amount: amountValue ,status:status})
      });

      if (response.ok) {
        const walletData = await response.json();
        console.log('Money added successfully');

          // const modal = new bootstrap.Modal(document.getElementById('exampleModal'));
          // modal.show();
          const alertContainer = document.getElementById('alertContainer');

          // Clear existing alerts
           alertContainer.innerHTML = '';

          const alertElement = document.createElement('div');
          alertElement.className = 'alert alert-success alert-dismissible fade show'; // Add Bootstrap classes
          alertElement.setAttribute('role', 'alert');
          alertElement.style.opacity = '0';

          // Create the content for the alert
          alertElement.innerHTML = `
         
         <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
         <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
         </svg>
         Money added to the wallet successfully.
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
         `;

          // Append the alert to the container
          alertContainer.appendChild(alertElement);
          alertContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
          let opacity = 0;
          const fadeInInterval = setInterval(() => {
            opacity += 0.1; // Increase opacity gradually
            alertElement.style.opacity = `${opacity}`; // Set the new opacity
            if (opacity >= 1) {
              clearInterval(fadeInInterval); // Stop increasing opacity when it reaches 1
              
              
            }
          }, 50);

          setInterval(() => {
            window.location.reload();
              
          },2000)

      } else {

        console.error('Failed to place product order');
      }
    }
  
  });

</script>
<%- include('footer') %>